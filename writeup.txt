In order to get rid of the unwanted titles in the wiki file, I created a web method that uses a regular expression to only accept titles that have a-z and an underscore. And because Wikipedia uses an underscore to represent spaces, I created another method using the string Replace method in order to replace the underscores with spaces and create a better user experience (since most people would type a space instead of an underscore). The addToTrie web method searches through the Wikipedia file and adds titles to the trie, while checking the memory after every 10,000 titles. The check memory is done using the GetTotalMemory method, and is set to stop after getting to 900Mb. As for searching the trie, the web method just returns a list of strings. The trie itself is made up of nodes that have a HybridDictionary that represents the children. This was done in order to save space as a HybridDictionary would change structure depending on how many entries it has. To represent the end of a word in the trie, a “$” is used as it cannot be used in any of the titles after only allowing a-z with an underscore. In order to add a word to the trie, it first checks to see if the word can be partially found in the trie. It checks the current letter to the letters in the trie at the specific level, and then goes down if the current letter matches any of the other ones. Otherwise, it will create a new node with an empty children HybridDictionary and keep creating more until it reaches the end of the word. The nodes also contain a variable that references the current character, and the index in the HybridDictionary a node is placed is based on this character with 0 being ‘a’, 1 being ‘b’, and so on. For ‘$’, the index 27 is used and for ‘ ‘ the index 26 is used. In order to search for a word, an AJAX call is made to the searchTrie web method, which then calls the method in the trie class. This method steps through the trie using each character in the input string from the AJAX call until it gets to the very last letter. At that point, it will be at the same spot in the trie where the search input is located. From here, it calls a private helper method that returns a list of strings of words that start with the same letters as the search input. This method is recursive and only returns once it gets to the very end of a path in the trie. It searches through each of the keys in the children HybridDictionary and adds to the list if one of the keys is the end character “$” and only if the list does not contain 10 strings already. If there are 10 strings in the list, it stops in order to perform faster.